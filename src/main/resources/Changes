Muhammad Akbar - 60094808

Profile page for user working
Changes:
1 - had to change "register" to "registrations" in db file.
2 - added "" when calling getUser() function.

Commit 2 -
Changes:
1 - Added all the tables in the ERD into my Database
2 - Added the models for each tables
3 - Added only the User repository (because that's all i needed to test)
4 - Changed the content of UserController so that it would work with User table instead of students table
5 - Changed the src/user/Profile.js so that it worked with the User table instead of Students table
6 - Created a new directory in the src file called marketing
    -Added Marketing.js
7 - When changing role from "ROLE_USER" to "ROLE_MARKETING"
    - Created a new MarketingController
    - Changed the jwt/JwtWebSecurityConfig.java and added ".and().authorizeRequests().antMatchers("/marketing/**").hasRole("MARKETING")" so it would work
8 - added "getMarketing = query => this.getByQuery('marketing', query)" in db
9 - added "isMarketing = () => this.user && this.user.role === "ROLE_MARKETING"" in auth

Commit 3 -
Changes:
1 - Changed Analytics table to "Analytic" (singular). Changed Analytics page to (pagename) field.
2 - Created Order Menu Component
    - Added the Model for Normal (normal products)
    - Created the NormalRepository
    - Created a Menu.js which shows all of the products in the "Normal" table
    - The page includes all of the name of the product the description the price and whether or not it is in stock.
    - It also has a buy (not implemented yet) button where a user can click buy and then it will add that product to his cart. (This buy button will only show up if the user is logged in and if it is a user_role)
    - There is also a detail link that will take you to a DetailsPage.
3 - Created MenuDetails.js which will take you to another page by sending in the id of the product.
    - Added to the NormalRepository findById
    - In the Public controller i added it so that it would work when path "/menu/{id}" is entered (uses the normalRepository.findById to get the specific id and therefore the specific product)
    - The page will include all of the details needed for that particular product (name, description, type, price, in stock and quantity) and it will also show the image of the product. (might add image to the menu page later on)
4 - Started on implementing the Analytics component.
    - Created Analytic Model and Repository
    - Created a PageRecord.js in marketing folder.
    - It is a class that takes in pagename, pid (product id), and username (if it is a user) and then runs a method called saveRecord which will save it and add it to the Analytic table.
    (That's idea but it is not functional yet)

Commit 4 -
Changes:
1 - Added a Personality Quiz feature (still proof of concept version)
    - Created Quiz.js (with the help of Omar)
    - The quiz shows a set of questions with options the user can choose
    - Depending on the different options the user chooses they will get a different result. (it works, but it has so much more potential, and I will keep building it)
    - And then they will be take to a different product details page (that depends on the options they chose)
    (it taken to a different product page is temporary and a proof of concept i will later on change it and implement something better)
2 - Created QuizResult.js
    - This for now is a copy of productDetails page
    - Different id will be sent depending on which options the user has chosen. (only the first 4 options will change the id for now)
    - It will show the different products for the different options.
3 - Added a chat bot component (src/components/chatbot/CustomChatbot.js)
    - added a ChatBot library
    - As of right now the chat bot is very minimal but I will be adding on to it soon.
    - (Later) The bot will answer the FAQ made by the user
    - In general it will help any user who needs help or has questions
4 - Created a starRating component (src/components/rating/StarRating.js)
    - The user can interact with it and can choose the star rating they want.
    - It has a hover "animation" so it doesnt look static, and will change depending on which star the user's mouse is on.
    - created an App.css for the styling of the starRating.
    - This component can be easily added to the order component so when the user finish his order they can rate their experience.